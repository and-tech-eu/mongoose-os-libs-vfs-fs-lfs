author: mongoose-os
description: Implements the mos VFS interface for little FS (https://github.com/ARMmbed/littlefs)
type: lib
version: 2.1

sources:
  - src
  # https://github.com/ARMmbed/littlefs @ f35fb8c14866a4a4677756f6dbeca78f8a9b4001
  - littlefs
  # https://github.com/ARMmbed/littlefs @ 4827795e4b8b4b1c849ac50347fb49c4dd443964
  - littlefs1

includes:
  - include
  - littlefs
  - littlefs1

libs:
  - origin: https://github.com/mongoose-os-libs/vfs-common

no_implicit_init_deps: true
init_after:
  - vfs-common

build_vars:
  MGOS_ROOT_FS_OPTS_LFS: '{"bs":4096,"is":128}'

cdefs:
  LFS_NO_DEBUG: 1
  # LFSv1 compatibility mode
  # 0 - none:  No LFSv1 code in the firmware, attempts to mount LFSv1 filesystem results in an error.
  # 1 - full:  Existing LFSv1 filesystems can be mounted rw and used with no restrictions.
  #            Firmware contains full LFSv1 code, data is not migrated, mkfs always creates LFSv2.
  # 2 - stomp: LFSv1 filesystems are stomped and reformatted as LFSv2 without preserving the data.
  #            No LFSv1 code, no data migration, mkfs creates LFSv2.
  #            This option is suitable for cases where LFS is only used as scratch space.
  # TODO(rojer): Options for r/o mounts (OTA) and in-place migration when r/w.
  MGOS_LFS1_COMPAT: 0
  MGOS_ROOT_FS_OPTS_LFS: '{"bs":4096,"is":128}'

conds:
  # STM32 relies more heavily on LFS, turn on full compatibility by default.
  - when: mos.platform == "stm32"
    apply:
      cdefs:
        MGOS_LFS1_COMPAT: 1

  # ESP8266 toolchain uses ancient GCC 4.8.5 which is too dumb to see through typedefs.
  - when: mos.platform == "esp8266"
    apply:
      cflags: ["-Wno-format"]

tags:
  - c
  - fs
  - vfs
  - core
  - docs:drivers:VFS (LittleFS)

manifest_version: 2018-06-20
